{
	"info": {
		"_postman_id": "b51aea0c-1107-48c0-af80-181cbddcf376",
		"name": "Simple Books API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18368784"
	},
	"item": [
		{
			"name": "Status",
			"item": [
				{
					"name": "Check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "List of books",
			"item": [
				{
					"name": "List of all books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the value types of JSON fields in all objects\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    responseJson.forEach((obj) => {\r",
									"        pm.expect(obj.id).to.be.a('number');\r",
									"        pm.expect(obj.name).to.be.a('string');\r",
									"        pm.expect(obj.type).to.be.oneOf(['fiction', 'non-fiction']);\r",
									"        pm.expect(obj.available).to.be.a('boolean');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Books with type=non-fiction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the value type in the 'type' field in all JSON objects\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    responseJson.forEach((obj) => {\r",
									"        pm.expect(obj.type).to.equal(\"non-fiction\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books?type=non-fiction",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "non-fiction"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Books with not valid type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains information about invalid value for query parameter 'type'. \", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"     pm.expect(responseJson.error).to.equal(\"Invalid value for query parameter 'type'. Must be one of: fiction, non-fiction.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books?type=lorem ipsum",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "lorem ipsum"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List of books limited to 1 record (min limit value)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains only one item, its id is equal = 1\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(Object.keys(responseJson)).to.have.lengthOf(1);\r",
									"    pm.expect(responseJson[Object.keys(responseJson)[0]].id).to.equal(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books?limit=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List of books limited to 20 record (max limit value)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains max of 20 items and id is between 1 and 20\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(Object.keys(responseJson)).to.have.lengthOf.at.most(20);\r",
									"    Object.values(responseJson).forEach((item) => {\r",
									"        pm.expect(item.id).to.be.within(1, 20);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books?limit=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List of books limited to not valid limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains information about invalid value for query parameter 'limit'. \", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"     pm.expect(responseJson.error).to.equal(\"Invalid value for query parameter 'limit'. Cannot be greater than 20.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books?limit=21",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "limit",
									"value": "21"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List of books with limit=0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains information about invalid value for query parameter 'limit'. \", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"     pm.expect(responseJson.error).to.equal(\"Invalid value for query parameter 'limit'. It cannot be less than 1.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books?limit=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "limit",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List of books with limit=chomik",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains information about invalid value for query parameter 'chomik'. \", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"     pm.expect(responseJson.error).to.equal(\"Invalid value for query parameter 'chomik'. The parameter value is not a numeric value\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books?limit=chomik",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "limit",
									"value": "chomik"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List of books with empty limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains information about invalid value for empty query parameter\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"     pm.expect(responseJson.error).to.equal(\"Invalid value for empty query parameter. The parameter value should be a numeric value\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books?limit=",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "limit",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List of books with limit=2 and type=fiction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains two items, both with the type = 'fiction'\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(Object.keys(responseJson)).to.have.lengthOf(2);\r",
									"    Object.values(responseJson).forEach((item) => {\r",
									"        pm.expect(item.type).to.equal('fiction');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books?limit=2&type=fiction",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								},
								{
									"key": "type",
									"value": "fiction"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get a single book",
			"item": [
				{
					"name": "Get book with ID=2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains item with id = 2\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.equal(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get book with ID=-5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Body does not contains item with id = -5\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"No book with id -5\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books/-5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books",
								"-5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get book with ID=50",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Body does not contains item with id = 50\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"No book with id 50\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books/50",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books",
								"50"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get book with ID=chomik",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Body does not contains item with NaN id = 'chomik'\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"No book with id NaN\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books/chomik",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books",
								"chomik"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authorization and register API client",
			"item": [
				{
					"name": "Register API client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct registration of the client in the database\", () => {\r",
									"     pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the length of the access token\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.accessToken).to.have.lengthOf(64);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const clientName = \"Klient\" + Math.floor(Math.random() * 1000) + 1;\r",
									"\r",
									"const generateEmail = () => {\r",
									"  const emailPrefix = \"example\";\r",
									"  const emailDomain = \"api.com\";\r",
									"  const randomNumber = Math.floor(Math.random() * 1000000);\r",
									"\r",
									"  return `${emailPrefix}${randomNumber}@${emailDomain}`;\r",
									"}\r",
									"\r",
									"//ustawienie zmodyfikowanego body w formacie JSON\r",
									"pm.request.body.raw = JSON.stringify({\r",
									"    \"clientName\": clientName,\r",
									"    \"clientEmail\": generateEmail()\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api-clients/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api-clients",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Register API client with the same name and email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", () => {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains information that API client already registered\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"API client already registered. Try a different email.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"clientName\": \"Hanna\",\r\n    \"clientEmail\": \"hanna@api.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api-clients/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api-clients",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Register API client without name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains information about invalid or missing client name\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"Invalid or missing client name.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"clientName\": \"\",\r\n    \"clientEmail\": \"anna@api.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api-clients/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api-clients",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Register API client with wrong email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains information about invalid or missing client email\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"Invalid or missing client email.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"clientName\": \"Jan\",\r\n    \"clientEmail\": \"janapicom\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api-clients/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api-clients",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Register API client with empty body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains information about invalid or missing client name\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"Invalid or missing client name.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api-clients/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api-clients",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Submit an order",
			"item": [
				{
					"name": "Submit an order without authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains information about missing Authorization header\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"Missing Authorization header.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"bookId\": 2,\r\n    \"customerName\": \"Anna\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit an order with valid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Submit an order with authentication.\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.created).to.equal(true);\r",
									"   pm.expect(responseJson.orderId).to.have.lengthOf(21);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "66cbc95571b04527c7885fc4d5a393d3d6f6d1f94ed33f257963f919659a7a73",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"bookId\": 4,\r\n    \"customerName\": \"Hanna\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit an order with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains information about invalid bearer token.\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"Invalid bearer token.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "786ee94ee04b0ae635b15fb94bdd4d5fb3982c988ee51517b38028ff56307bcf",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"bookId\": 6,\r\n    \"customerName\": \"Hanna\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit an order with the same book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Submit an order with authentication with the same book and client.\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.created).to.equal(true);\r",
									"   pm.expect(responseJson.orderId).to.have.lengthOf(21);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "66cbc95571b04527c7885fc4d5a393d3d6f6d1f94ed33f257963f919659a7a73",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"bookId\": 1,\r\n    \"customerName\": \"Hanna\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit an order with invalid book (not available)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Information about an unavailable book\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"This book is not in stock. Try again later.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "66cbc95571b04527c7885fc4d5a393d3d6f6d1f94ed33f257963f919659a7a73",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"bookId\": 2,\r\n    \"customerName\": \"Hanna\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit an order with wrong bookID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains information about invalid or missing bookId.\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"Invalid or missing bookId.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "66cbc95571b04527c7885fc4d5a393d3d6f6d1f94ed33f257963f919659a7a73",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"bookId\": \"chomik\",\r\n    \"customerName\": \"Hanna\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get all orders",
			"item": [
				{
					"name": "Get all orders (with authentication)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the value types of JSON fields in all objects\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    responseJson.forEach((obj) => {\r",
									"        pm.expect(obj.id).to.be.a('string');\r",
									"        pm.expect(obj.bookId).to.be.a('number');\r",
									"        pm.expect(obj.customerName).to.be.a('string');\r",
									"        pm.expect(obj.createdBy).to.have.lengthOf.at.most(64);\r",
									"        pm.expect(obj.quantity).to.be.a('number');\r",
									"        pm.expect(obj.timestamp).to.be.a('number');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "66cbc95571b04527c7885fc4d5a393d3d6f6d1f94ed33f257963f919659a7a73",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all orders (without authentication)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains information about missing Authorization header.\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"Missing Authorization header.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all orders (with invalid authentication)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains information about invalid bearer token.\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"Invalid bearer token.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "123456789",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get an order",
			"item": [
				{
					"name": "Get order with ID (with authentication)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the value types of JSON fields in all objects\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"        pm.expect(responseJson.id).to.equal('S5_YQZtF60pEqMQhS7zDA');\r",
									"        pm.expect(responseJson.bookId).to.equal(4);\r",
									"        pm.expect(responseJson.customerName).to.equal('Hanna');\r",
									"        pm.expect(responseJson.createdBy).to.have.lengthOf.at.most(64);\r",
									"        pm.expect(responseJson.quantity).to.be.a('number');\r",
									"        pm.expect(responseJson.timestamp).to.be.a('number');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "66cbc95571b04527c7885fc4d5a393d3d6f6d1f94ed33f257963f919659a7a73",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/S5_YQZtF60pEqMQhS7zDA",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"S5_YQZtF60pEqMQhS7zDA"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order with ID (without authentication)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains information about missing Authorization header.\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"Missing Authorization header.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/S5_YQZtF60pEqMQhS7zDA",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"S5_YQZtF60pEqMQhS7zDA"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order with ID (with invalid authentication)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains information about invalid bearer token.\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"Invalid bearer token.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "123456789",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/S5_YQZtF60pEqMQhS7zDA",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"S5_YQZtF60pEqMQhS7zDA"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order with ID=chomik (with authentication)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains information about no order\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"No order with id chomik.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "66cbc95571b04527c7885fc4d5a393d3d6f6d1f94ed33f257963f919659a7a73",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/chomik",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"chomik"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update an order",
			"item": [
				{
					"name": "Update order with ID (with authentication)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "66cbc95571b04527c7885fc4d5a393d3d6f6d1f94ed33f257963f919659a7a73",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"customerName\": \"Joanna\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/S5_YQZtF60pEqMQhS7zDA",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"S5_YQZtF60pEqMQhS7zDA"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order with ID (without authentication)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains information about missing Authorization header.\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"Missing Authorization header.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"customerName\": \"Bogdan\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/PqvG8gFMJGlulrOFPahCl",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"PqvG8gFMJGlulrOFPahCl"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order with ID (with invalid authentication)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains information about invalid bearer token.\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"Invalid bearer token.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "123456789",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"customerName\": \"Bogdan\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/PqvG8gFMJGlulrOFPahCl",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"PqvG8gFMJGlulrOFPahCl"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order with ID=5 (doesn't eqist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains information about no order\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"No order with id 5.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "66cbc95571b04527c7885fc4d5a393d3d6f6d1f94ed33f257963f919659a7a73",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"customerName\": \"Bogdan\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"5"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete an order",
			"item": [
				{
					"name": "Delete order with valid ID (without authorization)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains information about missing Authorization header.\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"Missing Authorization header.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/5p5bme_JFgwhf3ZoGdkwg",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"5p5bme_JFgwhf3ZoGdkwg"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete order with valid ID (with invalid authorization)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains information about invalid bearer token.\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"Invalid bearer token.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "123456789",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/5p5bme_JFgwhf3ZoGdkwg",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"5p5bme_JFgwhf3ZoGdkwg"
							]
						}
					},
					"response": [
						{
							"name": "Delete order with valid ID (with invalid authorization)",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/VD88zm6jBkKijnM3pZ54G",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										"VD88zm6jBkKijnM3pZ54G"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 13 Dec 2021 18:35:10 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "33"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-powered-by",
									"value": "Express"
								},
								{
									"key": "etag",
									"value": "W/\"21-bG6N9MGZ9+XoO/KuGDSYhW5FJyc\""
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": \"Invalid bearer token.\"\n}"
						}
					]
				},
				{
					"name": "Delete order with valid ID (with authorization)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "66cbc95571b04527c7885fc4d5a393d3d6f6d1f94ed33f257963f919659a7a73",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/S5_YQZtF60pEqMQhS7zDA",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"S5_YQZtF60pEqMQhS7zDA"
							]
						}
					},
					"response": [
						{
							"name": "Delete order with valid ID (with authorization)",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/VD88zm6jBkKijnM3pZ54G",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										"VD88zm6jBkKijnM3pZ54G"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 13 Dec 2021 16:32:26 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-powered-by",
									"value": "Express"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Delete the same order with valid ID (with authorization)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains information about no order\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error).to.equal(\"No order with id S5_YQZtF60pEqMQhS7zDA.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "66cbc95571b04527c7885fc4d5a393d3d6f6d1f94ed33f257963f919659a7a73",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/S5_YQZtF60pEqMQhS7zDA",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"S5_YQZtF60pEqMQhS7zDA"
							]
						}
					},
					"response": [
						{
							"name": "Delete the same order with valid ID (with authorization)",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/VD88zm6jBkKijnM3pZ54G",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										"VD88zm6jBkKijnM3pZ54G"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 13 Dec 2021 16:33:59 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "51"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-powered-by",
									"value": "Express"
								},
								{
									"key": "etag",
									"value": "W/\"33-Q1Bcc3KxAMOlGHKtvMBX6Zi+Pmk\""
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": \"No order with id VD88zm6jBkKijnM3pZ54G.\"\n}"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://simple-books-api.glitch.me"
		}
	]
}